version: '3.5'

services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    # etcd: Milvus의 메타데이터 저장소

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    # MinIO: Milvus의 객체 저장소

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.3
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"  # Milvus 서버 포트
      - "9091:9091"    # 메트릭 포트
    depends_on:
      - "etcd"
      - "minio"
    # Milvus: 벡터 데이터베이스 서버

networks:
  default:
    name: milvus

# 주요 설명:
# 1. etcd: Milvus의 메타데이터를 저장하는 키-값 저장소입니다.
# 2. MinIO: Milvus의 대용량 데이터를 저장하는 객체 저장소입니다.
# 3. Milvus: 벡터 검색 엔진으로, etcd와 MinIO에 의존합니다.
# 4. 모든 서비스는 'milvus'라는 이름의 Docker 네트워크에 연결됩니다.
# 5. ${DOCKER_VOLUME_DIRECTORY:-./} 는 환경 변수 DOCKER_VOLUME_DIRECTORY가 설정되어 있지 않으면 현재 디렉토리를 사용합니다.